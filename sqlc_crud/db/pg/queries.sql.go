// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package pg

import (
	"context"
)

const addMsg = `-- name: AddMsg :one
INSERT INTO messages (
  body, send_at, was_sent_at, status, tries
) VALUES (
  $1, $2, $2, "not touched", 0
)
RETURNING id, body, send_at, was_sent_at, status, tries
`

type AddMsgParams struct {
	Body   string
	SendAt string
}

func (q *Queries) AddMsg(ctx context.Context, arg AddMsgParams) (Message, error) {
	row := q.db.QueryRow(ctx, addMsg, arg.Body, arg.SendAt)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.SendAt,
		&i.WasSentAt,
		&i.Status,
		&i.Tries,
	)
	return i, err
}

const deleteMsg = `-- name: DeleteMsg :exec
DELETE FROM messages
WHERE id = $1
`

func (q *Queries) DeleteMsg(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMsg, id)
	return err
}

const getAllMsgs = `-- name: GetAllMsgs :many
SELECT id, body, send_at, was_sent_at, status, tries FROM messages
`

func (q *Queries) GetAllMsgs(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getAllMsgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.SendAt,
			&i.WasSentAt,
			&i.Status,
			&i.Tries,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMsgById = `-- name: GetMsgById :one
SELECT id, body, send_at, was_sent_at, status, tries FROM messages
WHERE id = $1
`

func (q *Queries) GetMsgById(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMsgById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.SendAt,
		&i.WasSentAt,
		&i.Status,
		&i.Tries,
	)
	return i, err
}

const getUnprocessed = `-- name: GetUnprocessed :many
SELECT id, body, send_at, was_sent_at, status, tries FROM messages
WHERE status = "not touched"
`

func (q *Queries) GetUnprocessed(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getUnprocessed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.SendAt,
			&i.WasSentAt,
			&i.Status,
			&i.Tries,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE messages
  set status = $2,
  tries = $3,
  was_sent_at = $4
WHERE id = $1
`

type UpdateParams struct {
	ID        int64
	Status    string
	Tries     int32
	WasSentAt string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.Status,
		arg.Tries,
		arg.WasSentAt,
	)
	return err
}
